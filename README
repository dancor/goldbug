goldbug is a database creator and analyzer for go opening positions.
i've completed an initial v1 which was using it to create the
best-repertoire file.  i made some trade-offs while getting the perf
improvements to do that, such as switching to a much crappier
homegrown sgf parser (which makes this less generally useful)
(note the "sgf" package was way too slow, sure that can be improved).
i do more statistical stuff later, get back more usability, and/or
try to increase perf further.

todo
- maybe an option to not enter interactive mode if you don't want to?
  or can just "echo q |"
- symmetry normalization?  many early moves are standardized but e.g.
  the go4go database has, after 1 Q16 D16 2 Q4 D4, both 3 F3 and 3 F17

current issues
- db loading is way slow (5 min?) for large db (> 10K games)
  - loading from judy array shouldn't be this slow?  something in the
    haskell part of things..
  - possbily another struct is needed like C hashmap that can be
    copied into memory and then just set pointer to head of it etc
    (haskell vector could do same?); judy supposed to be so fast tho
- figure out why needed workaround to avoid judy segfaults
  (see git log)

game collection notes
- i couldn't find a good free go game collection
- i'm currently using SGF files i bought from go4go
- i had to add FF[4] in the SGF files to get them to parse
  (before, when using sgf package instead of homegrown parser):
  ~ sed 's/^(;DT\[/(;FF[4];DT[/' -i ./**/*.sgf
